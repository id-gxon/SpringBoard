# Database
	- DB 생성, 계정 생성, 테이블 설계(ERD), 테이블 더미 데이터 생성

# SpringMVC
	- 패키지 구조 설계, 개발 환경 구성(빌드도구 - MAVEN), 컨트롤러, 서비스, DAO 구조 설계, 테스트 파일 생성

# View
	뷰 페이지 형태 설정

	# 컨트롤러 설계 #
		- 공통적인 URI의 경로 / 각 기능별 URI 경로
		- 각 URI의 호출 방법(GET/POST)
		- 각 기능별 결과 처리(View 출력, Redirect)
		- 예외 페이지
		
		= 컨트롤러를 구분하는 기준은 도메인 객체(DB Table)
		
		* 공통 URI	: /board or /boards
		* 호출 방식	: GET - 사용자 정보 입력, 조회, 출력
					  POST - 데이터를 처리(insert, update, delete)
		* 기능별 URI: 글쓰기GET - /board/register
					  글쓰기POST - /board/register
					  리스트GET - /board/list
					  본문읽기GET - /board/read?bno=000
					  본문수정GET - /board/modify?bno=000
					  본문수정POST - /board/modify
					  본문삭제POST - /board/remove?bno=000
	
	# 의존객체 자동주입 #
		- 스프링(컨테이너)이 자동으로 의존관계에 있는 객체를 사용하도록 의존성을 주입하는 것
		
		* @Inject: Java에서 지원하는 어노테이션(특정 프레임워크에 종속적이지 않음)
			
			- 의존객체를 찾는 순서
				[타입] -> [@Qualifier] -> [이름] -> 실패
				
			- 빌드도구(Maven / Gradle)를 사용해서 라이브러리 의존성 추가 필요
			- 멤버 변수, Setter, 생성자, 일반 메서드 사용 가능
		
		* @Autowired: Spring에서 지원하는 어노테이션
			
			- 의존객체를 찾는 순서
				[타입] -> [이름] -> [@Qualifier] -> 실패
			
			- @Inject와 찾는 순서만 다를 뿐 동일하게 동작
			- <context:annotation-config/> 구문 설정 필요
			- 멤버변수, Setter, 생성자, 일반 메서드 사용 가능
		
		* @Resource: Java에서 지원하는 어노테이션
		
			- 의존객체를 찾는 순서
				[이름] -> [타입] -> [@Qualifier] -> 실패
			
			- <context:annotation-config/> 구문 설정 필요
			- 멤버변수, Setter 사용 가능
		
		** @Qualifier
			1) 객체를 주입 받아올 때 동일한 객체(bean)가 있을 경우 예외 발생
			2) 특정 객체를 구분하기 위한 이름(별명)
			
			ex)	<bean id="dataSource1"class="com.zaxxer.hizari.HikariDataSource">
					<qualifier value="ds1"/>
				</bean>
				<bean id="dataSource2" class="com.zaxxer.hizari.HikariDataSource">
					<qualifier value="ds2"/>
				</bean>
				
				@Inject / @Autowired	@Qualifier("ds2")
				private DataSource ds;
				
				-------------------------------------------------------------------
				
				// 생성자를 사용한 객체 주입
				private DataSource ds;
				
				public Test(DataSource ds) {
					this.ds = ds;
				}
				
				= 순환 참조를 막을 수 있어 권장(Test와 유지보수에 유리)
		

* p.83
	커넥션 풀: DB 연결 정보를 미리 생성 / 대여
	-> HikariCP - 스프링 부트에서도 사용(성능, 지속성 보장)


* Project package 구조
	- 계층형 구조: 각각의 객체 별로 따로 관리(Controller, Service, Persistence)
		장점: 프로젝트에 대한 이해도가 낮음 -> 구조 파악이 쉬움
		단점: 클래스가 많아지면 복잡, 모듈 별로 분리가 어려움
		
		= 프로젝트의 복잡도가 낮고, 기능이 적은 경우
		= 기능을 특정 기준을 바탕으로 구분하기 어려운 경우
		= 해당 기능을 별도의 모듈로 분리할 가능성이 없는 경우
	
	- 도메인형 구조: 도메인을 중심으로 따로 관리(Member.Controller, Member.Service, Member.Persistence)
		장점: 모듈 별로 구분이 쉬움(분리가 쉬움)
		단점: 프로젝트에 대한 이해도가 낮으면, 구조 파악이 힘듦, 개인적인 성향에 따른 구분(기준이 모호)
			* 패키지 간의 순환 참조의 가능성 존재
		
		= 프로젝트의 복잡도가 높고, 하나의 계층에 포함되는 클래스가 많은 경우
		= 기능 별로 명확한 구분이 가능한 경우
		= 추후에 별도로 모듈 분리가 가능한 경우
		
* @ModelAttribute vs @RequestParam
	-@ModelAttribute: 파라메터 저장 + 영역 저장(1:N 관계)
	-@RequestParam	: 파라메터 저장(1:1 관계)

* AOP(Aspect Oriented programming): 관점 지향 프로그래밍
	- 개발자는 핵심 로직에만 집중하고, 나머지는 스프링이 알아서 처리
	- 나머지 -> 보안, 트랜젝션, 로깅, 예외 처리
	
	= 주 기능과 보조 기능으로 분리 후 주 기능을 직접 구현하도록 만들어진 구조
	
	# Aspect	: 구현하고자 하는 보조 기능
	# Advice	: Aspect의 실제 구현체(Class)
	# Joinpoint	: Advice를 적용하는 지점(Method 호출)
	# Pointcut	: Advice가 적용되는 대상
	# Target	: Advice가 적용되는 Class
	# Weaving	: Advice를 주 기능에 적용하는 것
	
   
  * 페이징처리
   1) 원하는 만큼 글을 화면에 보여주기
   2) 페이지 하단에 페이징처리 블럭 
   3) 본문/수정/삭제 처리 이후에 원래 페이지로 이동
  
  * 페이징처리 원칙
   - 반드시 GET으로만 처리 (URL에 데이터 전달)
   - 조회화면에서 반드시 목록으로 이동하는 버튼 필요
   - 본문 조회전 페이지를 처리후에도 계속해서 유지    
  

	
	-- 자가복사 (더미 생성)
	insert into tbl_board (title, content,writer) 
	(select title,content,writer from tbl_board);

	* 페이징 처리 하단 블럭
		- 끝 페이지 번호(endPage)
			= (int) (Math.ceil(page / 페이지 블럭 수) * 페이지 블럭 수)
			
		- 시작 페이지 번호(startPage)
			= (endPage - 페이지 블럭 수) + 1
			
		- 전체 글 개수(totalCount)
		
		- 이전으로 이동(prev)
			= startPage == 1 ? false : true
			= startPage != 1
		
		- 다음으로 이동(next)
			= endPage * pageSize >= totalCount ? false : true
			= endPage * pageSize < totalCount
	
	Q. 한 페이지에 10개씩 출력, totalCount = 122 >> startPage, endPage, prev, next
		
	Q1. page 번호 = 3 >> 1, 10, false, true
		
		endPage = (int) (Math.ceil(3 / 10) * 10) = 10
		startPage = (10 - 10) + 1 = 1
		prev = 1 == 1 ? false : true = false
		next = 10 * 10 >= 122 ? false : true = true
	
	Q2. page 번호 = 10 >> 1, 10, false, true
		
		endPage = (int) (Math.ceil(10 / 10) * 10) = 10
		startPage = (10 - 10) + 1 = 1
		prev = 1 == 1 ? false : true = false
		next = 10 * 10 >= 122 ? false : true = true
		
	Q3. page 번호 = 11 >> 11, 20, true, false
	
		endPage = (int) (Math.ceil(11 / 10) * 10 = 20
		startPage = (20 - 10) + 1 = 11
		prev = 11 == 1 ? false : true = true
		next = 20 * 10 > 122 ? false : true = false
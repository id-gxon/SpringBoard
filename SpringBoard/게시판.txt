# Database
	- DB 생성, 계정 생성, 테이블 설계(ERD), 테이블 더미 데이터 생성

# SpringMVC
	- 패키지 구조 설계, 개발 환경 구성(빌드도구 - MAVEN), 컨트롤러, 서비스, DAO 구조 설계, 테스트 파일 생성

# View
	뷰 페이지 형태 설정


* p.83
	커넥션 풀: DB 연결 정보를 미리 생성 / 대여
	-> HikariCP - 스프링 부트에서도 사용(성능, 지속성 보장)


* Project package 구조
	- 계층형 구조: 각각의 객체 별로 따로 관리(Controller, Service, Persistence)
		장점: 프로젝트에 대한 이해도가 낮음 -> 구조 파악이 쉬움
		단점: 클래스가 많아지면 복잡, 모듈 별로 분리가 어려움
		
		= 프로젝트의 복잡도가 낮고, 기능이 적은 경우
		= 기능을 특정 기준을 바탕으로 구분하기 어려운 경우
		= 해당 기능을 별도의 모듈로 분리할 가능성이 없는 경우
	
	- 도메인형 구조: 도메인을 중심으로 따로 관리(Member.Controller, Member.Service, Member.Persistence)
		장점: 모듈 별로 구분이 쉬움(분리가 쉬움)
		단점: 프로젝트에 대한 이해도가 낮으면, 구조 파악이 힘듦, 개인적인 성향에 따른 구분(기준이 모호)
			* 패키지 간의 순환 참조의 가능성 존재
		
		= 프로젝트의 복잡도가 높고, 하나의 계층에 포함되는 클래스가 많은 경우
		= 기능 별로 명확한 구분이 가능한 경우
		= 추후에 별도로 모듈 분리가 가능한 경우